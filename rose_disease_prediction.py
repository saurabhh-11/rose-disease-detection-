import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import cv2
import os
import textwrap

# Constants
MODEL_PATH = "custom_cnn_rose_disease_model.h5"  # Model file in the same directory

# Language dictionaries
LANGUAGES = {
    'en': 'English',
    'hi': 'рд╣рд┐рдиреНрджреА',
    'mr': 'рдорд░рд╛рдареА'
}

UI_TEXT = {
    'en': {
        'title': 'ЁЯМ╣ Rose Disease Detection System',
        'subtitle': 'For Farmers and Gardeners',
        'about': 'About',
        'instructions': 'Instructions',
        'tips': 'Tips',
        'upload_image': 'Upload Image',
        'choose_image': 'Choose an image...',
        'predict': 'ЁЯФН Predict Disease',
        'prediction_results': 'Prediction Results',
        'info': 'Information',
        'gallery': 'Disease Gallery',
        'common_conditions': 'Common rose conditions and their symptoms:',
        'supported': 'Supported Categories:',
        'tips_content': 'тАв Take photos in good lighting\nтАв Focus on the affected area\nтАв Include both healthy and affected parts\nтАв Keep the image clear and steady',
        'best_practices_content': 'тАв Check multiple leaves if possible\nтАв Take photos from different angles\nтАв Ensure the leaf is well-lit\nтАв Avoid shadows and glare',
        'no_image': 'Please upload an image to continue.',
        'confidence': 'Confidence',
        'desc': 'Description:',
        'recommend': 'Recommendations:',
        'instruction_1': '1. Upload Image',
        'instruction_1_content': 'тАв Select a clear image of the rose leaf\nтАв Ensure good lighting\nтАв Focus on the affected area',
        'instruction_2': '2. ЁЯФН Predict Disease',
        'instruction_2_content': 'тАв Click the predict button\nтАв Wait for analysis\nтАв View results',
        'instruction_3': '3. Prediction Results',
        'instruction_3_content': 'тАв Check disease identification\nтАв Read description\nтАв Follow recommendations',
        'photo_tips': 'ЁЯУ╕ Photo Tips',
        'best_practices': 'ЁЯФН Best Practices'
    },
    'hi': {
        'title': 'ЁЯМ╣ рдЧреБрд▓рд╛рдм рд░реЛрдЧ рдкрд╣рдЪрд╛рди рдкреНрд░рдгрд╛рд▓реА',
        'subtitle': 'рдХрд┐рд╕рд╛рдиреЛрдВ рдФрд░ рдмрд╛рдЧрд╡рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП',
        'about': 'рдкрд░рд┐рдЪрдп',
        'instructions': 'рдирд┐рд░реНрджреЗрд╢',
        'tips': 'рд╕реБрдЭрд╛рд╡',
        'upload_image': 'рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'choose_image': 'рдПрдХ рдЫрд╡рд┐ рдЪреБрдиреЗрдВ...',
        'predict': 'ЁЯФН рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреЗрдВ',
        'prediction_results': 'рдкрд░рд┐рдгрд╛рдо',
        'info': 'рдЬрд╛рдирдХрд╛рд░реА',
        'gallery': 'рд░реЛрдЧ рдЧреИрд▓рд░реА',
        'common_conditions': 'рдЧреБрд▓рд╛рдм рдХреА рд╕рд╛рдорд╛рдиреНрдп рд╕реНрдерд┐рддрд┐рдпрд╛рдБ рдФрд░ рдЙрдирдХреЗ рд▓рдХреНрд╖рдг:',
        'supported': 'рд╕рдорд░реНрдерд┐рдд рд╢реНрд░реЗрдгрд┐рдпрд╛рдБ:',
        'tips_content': 'тАв рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рдореЗрдВ рдлреЛрдЯреЛ рд▓реЗрдВ\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рдХреНрд╖реЗрддреНрд░ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░реЗрдВ\nтАв рд╕реНрд╡рд╕реНрде рдФрд░ рдкреНрд░рднрд╛рд╡рд┐рдд рджреЛрдиреЛрдВ рднрд╛рдЧ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ\nтАв рдЫрд╡рд┐ рд╕реНрдкрд╖реНрдЯ рд░рдЦреЗрдВ',
        'best_practices_content': 'тАв рдпрджрд┐ рд╕рдВрднрд╡ рд╣реЛ рддреЛ рдХрдИ рдкрддреНрддрд┐рдпреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ\nтАв рд╡рд┐рднрд┐рдиреНрди рдХреЛрдгреЛрдВ рд╕реЗ рдлреЛрдЯреЛ рд▓реЗрдВ\nтАв рдкрддреНрддреА рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рд░реЛрд╢рди рд╣реЛ\nтАв рдЫрд╛рдпрд╛ рдФрд░ рдЪрдХрд╛рдЪреМрдВрдз рд╕реЗ рдмрдЪреЗрдВ',
        'no_image': 'рдХреГрдкрдпрд╛ рдЖрдЧреЗ рдмрдврд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред',
        'confidence': 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
        'desc': 'рд╡рд┐рд╡рд░рдг:',
        'recommend': 'рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ:',
        'instruction_1': '1. рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'instruction_1_content': 'тАв рдЧреБрд▓рд╛рдм рдХреА рдкрддреНрддреА рдХреА рд╕реНрдкрд╖реНрдЯ рдЫрд╡рд┐ рдЪреБрдиреЗрдВ\nтАв рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рдХреНрд╖реЗрддреНрд░ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░реЗрдВ',
        'instruction_2': '2. ЁЯФН рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреЗрдВ',
        'instruction_2_content': 'тАв рдкрд╣рдЪрд╛рди рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\nтАв рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реЗрдВ\nтАв рдкрд░рд┐рдгрд╛рдо рджреЗрдЦреЗрдВ',
        'instruction_3': '3. рдкрд╣рдЪрд╛рди рдкрд░рд┐рдгрд╛рдо',
        'instruction_3_content': 'тАв рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди рдЬрд╛рдВрдЪреЗрдВ\nтАв рд╡рд┐рд╡рд░рдг рдкрдврд╝реЗрдВ\nтАв рд╕рд┐рдлрд╛рд░рд┐рд╢реЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ',
        'photo_tips': 'ЁЯУ╕ рдлреЛрдЯреЛ рд╕реБрдЭрд╛рд╡',
        'best_practices': 'ЁЯФН рд╕рд░реНрд╡реЛрддреНрддрдо рдкреНрд░рдерд╛рдПрдВ'
    },
    'mr': {
        'title': 'ЁЯМ╣ рдЧреБрд▓рд╛рдм рд░реЛрдЧ рдУрд│рдЦ рдкреНрд░рдгрд╛рд▓реА',
        'subtitle': 'рд╢реЗрддрдХрд░реА рдЖрдгрд┐ рдорд╛рд│реНрдпрд╛рдВрд╕рд╛рдареА',
        'about': 'рдкрд░рд┐рдЪрдп',
        'instructions': 'рд╕реВрдЪрдирд╛',
        'tips': 'рдЯреАрдк',
        'upload_image': 'рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛',
        'choose_image': 'рдкреНрд░рддрд┐рдорд╛ рдирд┐рд╡рдбрд╛...',
        'predict': 'ЁЯФН рд░реЛрдЧ рдУрд│рдЦрд╛',
        'prediction_results': 'рдкрд░рд┐рдгрд╛рдо',
        'info': 'рдорд╛рд╣рд┐рддреА',
        'gallery': 'рд░реЛрдЧ рдЧреЕрд▓рд░реА',
        'common_conditions': 'рдЧреБрд▓рд╛рдмрд╛рдЪреНрдпрд╛ рд╕рд╛рдорд╛рдиреНрдп рд╕рдорд╕реНрдпрд╛ рдЖрдгрд┐ рддреНрдпрд╛рдВрдЪреА рд▓рдХреНрд╖рдгреЗ:',
        'supported': 'рд╕рдорд░реНрдерд┐рдд рд╢реНрд░реЗрдгреНрдпрд╛:',
        'tips_content': 'тАв рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкреНрд░рдХрд╛рд╢рд╛рдд рдлреЛрдЯреЛ рдШреНрдпрд╛\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рднрд╛рдЧрд╛рд╡рд░ рд▓рдХреНрд╖ рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рд╛\nтАв рдирд┐рд░реЛрдЧреА рдЖрдгрд┐ рдкреНрд░рднрд╛рд╡рд┐рдд рджреЛрдиреНрд╣реА рднрд╛рдЧ рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдХрд░рд╛\nтАв рдкреНрд░рддрд┐рдорд╛ рд╕реНрдкрд╖реНрдЯ рдареЗрд╡рд╛',
        'best_practices_content': 'тАв рд╢рдХреНрдп рдЕрд╕рд▓реНрдпрд╛рд╕ рдЕрдиреЗрдХ рдкрд╛рдиреЗ рддрдкрд╛рд╕рд╛\nтАв рд╡реЗрдЧрд╡реЗрдЧрд│реНрдпрд╛ рдХреЛрдирд╛рддреВрди рдлреЛрдЯреЛ рдШреНрдпрд╛\nтАв рдкрд╛рди рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдкреНрд░рдХрд╛рд╢рд╛рдд рдЕрд╕рд▓реНрдпрд╛рдЪреА рдЦрд╛рддреНрд░реА рдХрд░рд╛\nтАв рд╕рд╛рд╡рд▓реА рдЖрдгрд┐ рдЪрдХрд╛рдХреА рдЯрд╛рд│рд╛',
        'no_image': 'рдХреГрдкрдпрд╛ рдкреБрдвреЗ рдЬрд╛рдгреНрдпрд╛рд╕рд╛рдареА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛.',
        'confidence': 'рд╡рд┐рд╢реНрд╡рд╛рд╕',
        'desc': 'рд╡рд░реНрдгрди:',
        'recommend': 'рд╢рд┐рдлрд╛рд░рд╕реА:',
        'instruction_1': '1. рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛',
        'instruction_1_content': 'тАв рдЧреБрд▓рд╛рдмрд╛рдЪреНрдпрд╛ рдкрд╛рдирд╛рдЪреА рд╕реНрдкрд╖реНрдЯ рдкреНрд░рддрд┐рдорд╛ рдирд┐рд╡рдбрд╛\nтАв рдЪрд╛рдВрдЧрд▓рд╛ рдкреНрд░рдХрд╛рд╢ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рд╛\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рднрд╛рдЧрд╛рд╡рд░ рд▓рдХреНрд╖ рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рд╛',
        'instruction_2': '2. ЁЯФН рд░реЛрдЧ рдУрд│рдЦрд╛',
        'instruction_2_content': 'тАв рдУрд│рдЦрдгреНрдпрд╛рдЪреНрдпрд╛ рдмрдЯрдирд╛рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛\nтАв рд╡рд┐рд╢реНрд▓реЗрд╖рдгрд╛рдЪреА рд╡рд╛рдЯ рдкрд╣рд╛\nтАв рдкрд░рд┐рдгрд╛рдо рдкрд╣рд╛',
        'instruction_3': '3. рдУрд│рдЦрдгреНрдпрд╛рдЪреЗ рдкрд░рд┐рдгрд╛рдо',
        'instruction_3_content': 'тАв рд░реЛрдЧрд╛рдЪреА рдУрд│рдЦ рддрдкрд╛рд╕рд╛\nтАв рд╡рд░реНрдгрди рд╡рд╛рдЪрд╛\nтАв рд╢рд┐рдлрд╛рд░рд╕реАрдВрдЪреЗ рдкрд╛рд▓рди рдХрд░рд╛',
        'photo_tips': 'ЁЯУ╕ рдлреЛрдЯреЛ рдЯреАрдк',
        'best_practices': 'ЁЯФН рд╕рд░реНрд╡реЛрддреНрддрдо рдкрджреНрдзрддреА'
    }
}

# Disease info in all languages
DISEASE_INFO = {
    'en': {
        'healthy': {
            'name': 'Healthy',
            'description': 'The rose leaf appears healthy with no signs of disease.',
            'remedy': 'тАв Continue regular maintenance\nтАв Monitor for any changes\nтАв Maintain proper watering schedule\nтАв Keep good air circulation',
            'icon': 'тЬЕ'
        },
        'downy_mildew': {
            'name': 'Downy Mildew',
            'description': 'Downy mildew is a fungal disease that appears as yellow patches on leaves with grayish-white mold underneath.',
            'remedy': 'тАв Apply neem oil spray\nтАв Use baking soda solution (1 tbsp per gallon of water)\nтАв Improve air circulation\nтАв Remove infected leaves',
            'icon': 'ЁЯНД'
        },
        'powdery_mildew': {
            'name': 'Powdery Mildew',
            'description': 'Powdery mildew appears as white powdery spots on leaves and stems.',
            'remedy': 'тАв Spray with milk solution (1 part milk to 9 parts water)\nтАв Apply neem oil\nтАв Use baking soda spray\nтАв Prune affected areas',
            'icon': 'тЭДя╕П'
        },
        'black_spot': {
            'name': 'Black Spot',
            'description': 'Black spot causes black spots with yellow halos on leaves, leading to defoliation.',
            'remedy': 'тАв Apply neem oil\nтАв Use baking soda solution\nтАв Remove infected leaves\nтАв Improve air circulation',
            'icon': 'тЪл'
        },
        'rose_slug': {
            'name': 'Rose Slug',
            'description': 'Rose slugs are sawfly larvae that skeletonize leaves.',
            'remedy': 'тАв Handpick larvae\nтАв Apply neem oil\nтАв Use insecticidal soap\nтАв Encourage natural predators',
            'icon': 'ЁЯРЫ'
        },
        'rose_mosaic': {
            'name': 'Rose Mosaic',
            'description': 'Rose mosaic virus causes yellow patterns on leaves.',
            'remedy': 'тАв Remove infected plants\nтАв Use virus-free planting material\nтАв Maintain plant health\nтАв Control aphids',
            'icon': 'ЁЯОи'
        },
        'rose_rust': {
            'name': 'Rose Rust',
            'description': 'Rose rust appears as orange powdery spots on leaves and stems.',
            'remedy': 'тАв Apply neem oil\nтАв Use sulfur-based fungicide\nтАв Remove infected leaves\nтАв Improve air circulation',
            'icon': 'ЁЯЯа'
        }
    },
    'hi': {
        'healthy': {
            'name': 'рд╕реНрд╡рд╕реНрде',
            'description': 'рдЧреБрд▓рд╛рдм рдХреА рдкрддреНрддреА рд╕реНрд╡рд╕реНрде рд╣реИ рдФрд░ рдХрд┐рд╕реА рд░реЛрдЧ рдХрд╛ рдХреЛрдИ рд╕рдВрдХреЗрдд рдирд╣реАрдВ рд╣реИред',
            'remedy': 'тАв рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рдЬрд╛рд░реА рд░рдЦреЗрдВ\nтАв рдХрд┐рд╕реА рднреА рдмрджрд▓рд╛рд╡ рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ\nтАв рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИ рдмрдирд╛рдП рд░рдЦреЗрдВ\nтАв рдЕрдЪреНрдЫрд╛ рд╡рд╛рдпреБ рд╕рдВрдЪрд╛рд░ рд░рдЦреЗрдВ',
            'icon': 'тЬЕ'
        },
        'downy_mildew': {
            'name': 'рдбрд╛рдЙрдиреА рдорд┐рд▓реНрдбреНрдпреВ',
            'description': 'рдбрд╛рдЙрдиреА рдорд┐рд▓реНрдбреНрдпреВ рдПрдХ рдлрдлреВрдВрджрдЬрдирд┐рдд рд░реЛрдЧ рд╣реИ рдЬреЛ рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдкреАрд▓реЗ рдзрдмреНрдмреЛрдВ рдХреЗ рд░реВрдк рдореЗрдВ рджрд┐рдЦрд╛рдИ рджреЗрддрд╛ рд╣реИ, рдЬрд┐рдирдХреЗ рдиреАрдЪреЗ рдЧреНрд░реЗ-рд╕рдлреЗрдж рдлрдлреВрдВрджреА рд╣реЛрддреА рд╣реИред',
            'remedy': 'тАв рдиреАрдо рдХрд╛ рддреЗрд▓ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рдШреЛрд▓ (1 рдЯреЗрдмрд▓рд╕реНрдкреВрди рдкреНрд░рддрд┐ рдЧреИрд▓рди рдкрд╛рдиреА) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рд╡рд╛рдпреБ рд╕рдВрдЪрд╛рд░ рд╕реБрдзрд╛рд░реЗрдВ\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпрд╛рдБ рд╣рдЯрд╛рдПрдБ',
            'icon': 'ЁЯНД'
        },
        'powdery_mildew': {
            'name': 'рдкрд╛рдЙрдбрд░реА рдорд┐рд▓реНрдбреНрдпреВ',
            'description': 'рдкрд╛рдЙрдбрд░реА рдорд┐рд▓реНрдбреНрдпреВ рдкрддреНрддрд┐рдпреЛрдВ рдФрд░ рддрдиреЛрдВ рдкрд░ рд╕рдлреЗрдж рдкрд╛рдЙрдбрд░ рдЬреИрд╕реЗ рдзрдмреНрдмреЛрдВ рдХреЗ рд░реВрдк рдореЗрдВ рджрд┐рдЦрд╛рдИ рджреЗрддрд╛ рд╣реИред',
            'remedy': 'тАв рджреВрдз рдХрд╛ рдШреЛрд▓ (1 рднрд╛рдЧ рджреВрдз, 9 рднрд╛рдЧ рдкрд╛рдиреА) рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ\nтАв рдиреАрдо рдХрд╛ рддреЗрд▓ рд▓рдЧрд╛рдПрдБ\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рд╣рд┐рд╕реНрд╕реЗ рдХрд╛рдЯреЗрдВ',
            'icon': 'тЭДя╕П'
        },
        'black_spot': {
            'name': 'рдмреНрд▓реИрдХ рд╕реНрдкреЙрдЯ',
            'description': 'рдмреНрд▓реИрдХ рд╕реНрдкреЙрдЯ рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ рдФрд░ рдкреАрд▓реЗ рдШреЗрд░реЗ рдмрдирд╛рддрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рдкрддреНрддрд┐рдпрд╛рдБ рдЭрдбрд╝ рдЬрд╛рддреА рд╣реИрдВред',
            'remedy': 'тАв рдиреАрдо рдХрд╛ рддреЗрд▓ рд▓рдЧрд╛рдПрдБ\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рдШреЛрд▓ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпрд╛рдБ рд╣рдЯрд╛рдПрдБ\nтАв рд╡рд╛рдпреБ рд╕рдВрдЪрд╛рд░ рд╕реБрдзрд╛рд░реЗрдВ',
            'icon': 'тЪл'
        },
        'rose_slug': {
            'name': 'рд░реЛрдЬ рд╕реНрд▓рдЧ',
            'description': 'рд░реЛрдЬ рд╕реНрд▓рдЧ рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рдХрдВрдХрд╛рд▓ рдЬреИрд╕рд╛ рдмрдирд╛ рджреЗрддреЗ рд╣реИрдВред',
            'remedy': 'тАв рд▓рд╛рд░реНрд╡рд╛ рдХреЛ рд╣рд╛рде рд╕реЗ рд╣рдЯрд╛рдПрдБ\nтАв рдиреАрдо рдХрд╛ рддреЗрд▓ рд▓рдЧрд╛рдПрдБ\nтАв рдХреАрдЯрдирд╛рд╢рдХ рд╕рд╛рдмреБрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдкреНрд░рд╛рдХреГрддрд┐рдХ рд╢рддреНрд░реБрдУрдВ рдХреЛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░реЗрдВ',
            'icon': 'ЁЯРЫ'
        },
        'rose_mosaic': {
            'name': 'рд░реЛрдЬ рдореЛрдЬрд╝реЗрдХ',
            'description': 'рд░реЛрдЬ рдореЛрдЬрд╝реЗрдХ рд╡рд╛рдпрд░рд╕ рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдкреАрд▓реЗ рдкреИрдЯрд░реНрди рдмрдирд╛рддрд╛ рд╣реИред',
            'remedy': 'тАв рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рдПрдБ\nтАв рд╡рд╛рдпрд░рд╕-рд░рд╣рд┐рдд рдкреМрдз рд╕рд╛рдордЧреНрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдкреМрдзреЛрдВ рдХреЛ рд╕реНрд╡рд╕реНрде рд░рдЦреЗрдВ\nтАв рдПрдлрд┐рдбреНрд╕ рдХреЛ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ',
            'icon': 'ЁЯОи'
        },
        'rose_rust': {
            'name': 'рд░реЛрдЬ рд░рд╕реНрдЯ',
            'description': 'рд░реЛрдЬ рд░рд╕реНрдЯ рдкрддреНрддрд┐рдпреЛрдВ рдФрд░ рддрдиреЛрдВ рдкрд░ рдирд╛рд░рдВрдЧреА рдкрд╛рдЙрдбрд░ рдЬреИрд╕реЗ рдзрдмреНрдмреЛрдВ рдХреЗ рд░реВрдк рдореЗрдВ рджрд┐рдЦрд╛рдИ рджреЗрддрд╛ рд╣реИред',
            'remedy': 'тАв рдиреАрдо рдХрд╛ рддреЗрд▓ рд▓рдЧрд╛рдПрдБ\nтАв рд╕рд▓реНрдлрд░-рдЖрдзрд╛рд░рд┐рдд рдлрдлреВрдВрджрдирд╛рд╢рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпрд╛рдБ рд╣рдЯрд╛рдПрдБ\nтАв рд╡рд╛рдпреБ рд╕рдВрдЪрд╛рд░ рд╕реБрдзрд╛рд░реЗрдВ',
            'icon': 'ЁЯЯа'
        }
    },
    'mr': {
        'healthy': {
            'name': 'рдирд┐рд░реЛрдЧреА',
            'description': 'рдЧреБрд▓рд╛рдмрд╛рдЪреА рдкрд╛рдиреЗ рдирд┐рд░реЛрдЧреА рдЖрд╣реЗрдд рдЖрдгрд┐ рдХреЛрдгрддреНрдпрд╛рд╣реА рд░реЛрдЧрд╛рдЪреЗ рд▓рдХреНрд╖рдг рдирд╛рд╣реА.',
            'remedy': 'тАв рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓ рд╕реБрд░реВ рдареЗрд╡рд╛\nтАв рдХреЛрдгрддреЗрд╣реА рдмрджрд▓ рд▓рдХреНрд╖рд╛рдд рдШреНрдпрд╛\nтАв рдпреЛрдЧреНрдп рдкрд╛рдгреА рджреЗрдгреЗ рд╕реБрд░реВ рдареЗрд╡рд╛\nтАв рдЪрд╛рдВрдЧрд▓рд╛ рд╡рд╛рдпреБрд╡реАрдЬрди рдареЗрд╡рд╛',
            'icon': 'тЬЕ'
        },
        'downy_mildew': {
            'name': 'рдбрд╛рдЙрдиреА рдорд┐рд▓реНрдбреНрдпреВ',
            'description': 'рдбрд╛рдЙрдиреА рдорд┐рд▓реНрдбреНрдпреВ рд╣рд╛ рдПрдХ рдмреБрд░рд╢реАрдЬрдиреНрдп рд░реЛрдЧ рдЖрд╣реЗ рдЬреЛ рдкрд╛рдирд╛рдВрд╡рд░ рдкрд┐рд╡рд│реНрдпрд╛ рдард┐рдкрдХреНрдпрд╛рдВрд╕рд╛рд░рдЦрд╛ рджрд┐рд╕рддреЛ рдЖрдгрд┐ рдЦрд╛рд▓реА рд░рд╛рдЦрд╛рдбреА-рд╢реНрд╡реЗрдд рдмреБрд░рд╢реА рдЕрд╕рддреЗ.',
            'remedy': 'тАв рдиреАрдо рддреЗрд▓рд╛рдЪрд╛ рдлрд╡рд╛рд░рд╛ рдХрд░рд╛\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рджреНрд░рд╛рд╡рдг (1 рдЯреЗрдмрд▓рд╕реНрдкреВрди рдкреНрд░рддрд┐ рдЧреЕрд▓рди рдкрд╛рдгреА) рд╡рд╛рдкрд░рд╛\nтАв рд╡рд╛рдпреБрд╡реАрдЬрди рд╕реБрдзрд╛рд░рд╡рд╛\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрд╛рдиреЗ рдХрд╛рдврд╛',
            'icon': 'ЁЯНД'
        },
        'powdery_mildew': {
            'name': 'рдкрд╛рд╡рдбрд░реА рдорд┐рд▓реНрдбреНрдпреВ',
            'description': 'рдкрд╛рд╡рдбрд░реА рдорд┐рд▓реНрдбреНрдпреВ рдкрд╛рдирд╛рдВрд╡рд░ рдЖрдгрд┐ рдЦреЛрдбрд╛рдВрд╡рд░ рдкрд╛рдВрдврд░реЗ рдкрд╛рд╡рдбрд░ рд╕рд╛рд░рдЦреЗ рдбрд╛рдЧ рдирд┐рд░реНрдорд╛рдг рдХрд░рддреЛ.',
            'remedy': 'тАв рджреВрдз рджреНрд░рд╛рд╡рдг (1 рднрд╛рдЧ рджреВрдз, 9 рднрд╛рдЧ рдкрд╛рдгреА) рдлрд╡рд╛рд░рдгреА рдХрд░рд╛\nтАв рдиреАрдо рддреЗрд▓ рд▓рд╛рд╡рд╛\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рдлрд╡рд╛рд░рдгреА рдХрд░рд╛\nтАв рдкреНрд░рднрд╛рд╡рд┐рдд рднрд╛рдЧ рдХрд╛рдкрд╛',
            'icon': 'тЭДя╕П'
        },
        'black_spot': {
            'name': 'рдмреНрд▓реЕрдХ рд╕реНрдкреЙрдЯ',
            'description': 'рдмреНрд▓реЕрдХ рд╕реНрдкреЙрдЯ рдкрд╛рдирд╛рдВрд╡рд░ рдХрд╛рд│реЗ рдбрд╛рдЧ рдЖрдгрд┐ рдкрд┐рд╡рд│реЗ рд╡рд░реНрддреБрд│реЗ рдирд┐рд░реНрдорд╛рдг рдХрд░рддреЛ, рдЬреНрдпрд╛рдореБрд│реЗ рдкрд╛рдиреЗ рдЧрд│рддрд╛рдд.',
            'remedy': 'тАв рдиреАрдо рддреЗрд▓ рд▓рд╛рд╡рд╛\nтАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛ рджреНрд░рд╛рд╡рдг рд╡рд╛рдкрд░рд╛\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрд╛рдиреЗ рдХрд╛рдврд╛\nтАв рд╡рд╛рдпреБрд╡реАрдЬрди рд╕реБрдзрд╛рд░рд╡рд╛',
            'icon': 'тЪл'
        },
        'rose_slug': {
            'name': 'рд░реЛрдЬ рд╕реНрд▓рдЧ',
            'description': 'рд░реЛрдЬ рд╕реНрд▓рдЧ рдкрд╛рдиреЗ рдХрдВрдХрд╛рд▓рд╛рд╕рд╛рд░рдЦреА рдХрд░рддрд╛рдд.',
            'remedy': 'тАв рдЕрд│реНрдпрд╛ рд╣рд╛рддрд╛рдиреЗ рдХрд╛рдврд╛\nтАв рдиреАрдо рддреЗрд▓ рд▓рд╛рд╡рд╛\nтАв рдХреАрдЯрдХрдирд╛рд╢рдХ рд╕рд╛рдмрдг рд╡рд╛рдкрд░рд╛\nтАв рдиреИрд╕рд░реНрдЧрд┐рдХ рд╢рддреНрд░реВрдВрдирд╛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рди рджреНрдпрд╛',
            'icon': 'ЁЯРЫ'
        },
        'rose_mosaic': {
            'name': 'рд░реЛрдЬ рдореЛрдЭреЗрдХ',
            'description': 'рд░реЛрдЬ рдореЛрдЭреЗрдХ рд╡рд┐рд╖рд╛рдгреВ рдкрд╛рдирд╛рдВрд╡рд░ рдкрд┐рд╡рд│реЗ рдирдореБрдиреЗ рддрдпрд╛рд░ рдХрд░рддреЛ.',
            'remedy': 'тАв рд╕рдВрдХреНрд░рдорд┐рдд рдЭрд╛рдбреЗ рдХрд╛рдврд╛\nтАв рд╡рд┐рд╖рд╛рдгреВ-рдореБрдХреНрдд рд▓рд╛рдЧрд╡рдб рд╕рд╛рд╣рд┐рддреНрдп рд╡рд╛рдкрд░рд╛\nтАв рдЭрд╛рдбреЗ рдирд┐рд░реЛрдЧреА рдареЗрд╡рд╛\nтАв рдПрдлрд┐рдбреНрд╕ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рд╛',
            'icon': 'ЁЯОи'
        },
        'rose_rust': {
            'name': 'рд░реЛрдЬ рд░рд╕реНрдЯ',
            'description': 'рд░реЛрдЬ рд░рд╕реНрдЯ рдкрд╛рдирд╛рдВрд╡рд░ рдЖрдгрд┐ рдЦреЛрдбрд╛рдВрд╡рд░ рдирд╛рд░рд┐рдВрдЧреА рдкрд╛рд╡рдбрд░ рд╕рд╛рд░рдЦреЗ рдбрд╛рдЧ рдирд┐рд░реНрдорд╛рдг рдХрд░рддреЛ.',
            'remedy': 'тАв рдиреАрдо рддреЗрд▓ рд▓рд╛рд╡рд╛\nтАв рд╕рд▓реНрдлрд░-рдЖрдзрд╛рд░рд┐рдд рдмреБрд░рд╢реАрдирд╛рд╢рдХ рд╡рд╛рдкрд░рд╛\nтАв рд╕рдВрдХреНрд░рдорд┐рдд рдкрд╛рдиреЗ рдХрд╛рдврд╛\nтАв рд╡рд╛рдпреБрд╡реАрдЬрди рд╕реБрдзрд╛рд░рд╡рд╛',
            'icon': 'ЁЯЯа'
        }
    }
}

# Set page configuration
st.set_page_config(
    page_title="Rose Disease Detection",
    page_icon="ЁЯМ╣",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Add custom CSS
st.markdown("""
<style>
    /* Sidebar styling */
    .sidebar-container {
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .sidebar-header {
        color: #2c3e50;
        font-size: 1.2rem;
        margin-bottom: 1rem;
        font-weight: 600;
    }
    
    .instruction-step {
        margin-bottom: 1rem;
    }
    
    .instruction-title {
        color: #4CAF50;
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }
    
    .instruction-content {
        color: #2c3e50;
        font-size: 0.9rem;
        margin-left: 1rem;
    }
    .instruction-content ul,
    .tips-list {
        list-style-type: disc;
        padding-left: 1.2rem;
        margin-top: 0.2rem;
        margin-bottom: 0.2rem;
    }
    .instruction-content li,
    .tips-list li {
        margin-bottom: 0.2rem;
        line-height: 1.4;
    }
    
    .tips-section {
        color: #2c3e50;
        font-size: 0.9rem;
        line-height: 1.6;
    }
    
    .tips-header {
        margin-bottom: 0.5rem;
    }
    
    .tips-list {
        margin-left: 1rem;
        padding-left: 0.5rem;
    }
    
    .tips-subheader {
        margin: 1rem 0 0.5rem 0;
    }

    /* Prediction Results Styling */
    .prediction-box {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #ffffff;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .prediction-title-h3 {
        margin-bottom: 1rem;
    }

    .prediction-confidence-text {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
    }

    .prediction-confidence-desc {
        font-weight: 600;
    }

    /* Disease Information Styling */
    .info-box {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: #ffffff;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .info-description-container {
        margin-bottom: 2rem;
    }

    .info-heading {
        color: #2c3e50;
        margin-bottom: 1rem;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .info-description-text {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #2c3e50;
        margin-bottom: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .info-recommendations-container {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
    }

    /* Other Possible Conditions Styling */
    .other-prediction-box {
        padding: 1rem;
        border-radius: 8px;
        background-color: #f8f9fa;
        margin: 0.5rem 0;
    }

    .other-prediction-text {
        margin: 0;
    }
</style>
""", unsafe_allow_html=True)

def load_model():
    try:
        # Check if model file exists
        if not os.path.exists(MODEL_PATH):
            st.error(f"Model file not found at: {os.path.abspath(MODEL_PATH)}")
            st.error("Please ensure the model file 'custom_cnn_rose_disease_model.h5' is in the same directory as this script.")
            return None

        # Check if file is empty
        if os.path.getsize(MODEL_PATH) == 0:
            st.error("Model file is empty. Please check if the file is corrupted.")
            return None

        # Try to load the model
        try:
            # Disable GPU usage to avoid potential issues
            os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
            
            # Load model with custom_objects to handle potential compatibility issues
            model = tf.keras.models.load_model(MODEL_PATH, compile=False)
            
            # Compile the model
            model.compile(
                optimizer='adam',
                loss='categorical_crossentropy',
                metrics=['accuracy']
            )
            
            st.success("Model loaded successfully!")
            return model
            
        except Exception as model_error:
            st.error(f"Error loading model: {str(model_error)}")
            st.error("This might be due to:")
            st.error("1. Incompatible TensorFlow version")
            st.error("2. Corrupted model file")
            st.error("3. Model architecture mismatch")
            return None

    except Exception as e:
        st.error(f"Unexpected error: {str(e)}")
        return None

def preprocess_image(image):
    try:
        # Convert PIL Image to numpy array if needed
        if isinstance(image, Image.Image):
            image = np.array(image)
        
        # Ensure image is in RGB format
        if len(image.shape) == 2:  # Grayscale
            image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
        elif len(image.shape) == 3 and image.shape[2] == 4:  # RGBA
            image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB)
        
        # Resize image
        img = cv2.resize(image, (224, 224))
        
        # Normalize pixel values
        img = img.astype(np.float32) / 255.0
        
        # Add batch dimension
        img = np.expand_dims(img, axis=0)
        
        return img
    except Exception as e:
        st.error(f"Error preprocessing image: {str(e)}")
        return None

def get_disease_name(index):
    disease_mapping = {
        0: 'healthy',
        1: 'downy_mildew',
        2: 'powdery_mildew',
        3: 'black_spot',
        4: 'rose_slug',
        5: 'rose_mosaic',
        6: 'rose_rust'
    }
    return disease_mapping.get(index, 'unknown')

def get_confidence_class(confidence):
    if confidence >= 0.90:
        return "confidence-very-high"
    elif confidence >= 0.80:
        return "confidence-high"
    elif confidence >= 0.70:
        return "confidence-medium"
    elif confidence >= 0.60:
        return "confidence-low"
    else:
        return "confidence-very-low"

def get_confidence_description(confidence):
    if confidence >= 0.90:
        return "Very High Confidence"
    elif confidence >= 0.80:
        return "High Confidence"
    elif confidence >= 0.70:
        return "Medium Confidence"
    elif confidence >= 0.60:
        return "Low Confidence"
    else:
        return "Very Low Confidence"

def get_confidence_color(confidence):
    if confidence >= 0.90:
        return "#28a745"  # Green
    elif confidence >= 0.80:
        return "#17a2b8"  # Blue
    elif confidence >= 0.70:
        return "#ffc107"  # Yellow
    elif confidence >= 0.60:
        return "#fd7e14"  # Orange
    else:
        return "#dc3545"  # Red

def display_prediction_results(prediction, lang, DISEASES):
    T = UI_TEXT[lang]
    
    # Get top 3 predictions
    top_3_idx = np.argsort(prediction[0])[-3:][::-1]
    top_3_confidences = prediction[0][top_3_idx]
    top_3_diseases = [get_disease_name(idx) for idx in top_3_idx]
    
    # Main prediction
    main_disease = top_3_diseases[0]
    main_confidence = top_3_confidences[0]
    confidence_class = get_confidence_class(main_confidence)
    confidence_desc = get_confidence_description(main_confidence)
    confidence_color = get_confidence_color(main_confidence)
    
    # Display main prediction
    st.markdown(textwrap.dedent(f"""<div class="prediction-box"
        style="border-left: 5px solid {confidence_color};"
    >
        <h3 class="prediction-title-h3"
            style="color: {confidence_color};"
        >
            {DISEASES[main_disease]['icon']} {DISEASES[main_disease]['name']}
        </h3>
        <div class="prediction-confidence-text">
            <strong>{T['confidence']}:</strong> {main_confidence:.2%}
        </div>
        <p class="prediction-confidence-desc"
            style="color: {confidence_color};"
        >
            {confidence_desc}
        </p>
    </div>"""), unsafe_allow_html=True)
    
    # Generate list items for recommendations dynamically
    remedy_lines = [item.strip().lstrip('тАв') for item in DISEASES[main_disease]['remedy'].split('\nтАв') if item.strip()]
    remedy_html = "".join([f"<li>{line}</li>" for line in remedy_lines])

    st.markdown(f"""<div class="info-box">
<div class="info-description-container">
<h4 class="info-heading">{T['desc']}</h4>
<div class="instruction-content">{DISEASES[main_disease]['description']}</div>
</div>

<div class="info-recommendations-container" style="border-left: 4px solid #4CAF50;">
<h4 class="info-heading">{T['recommend']}</h4>
<div class="instruction-content">
<ul>
{remedy_html}
</ul>
</div>
</div>
</div>""", unsafe_allow_html=True)
    
    # Display other possible predictions
    if len(top_3_diseases) > 1:
        st.markdown("### Other Possible Conditions")
        for i, (disease, conf) in enumerate(zip(top_3_diseases[1:], top_3_confidences[1:]), 1):
            st.markdown(textwrap.dedent(f"""<div class="other-prediction-box"
                style="border-left: 3px solid {get_confidence_color(conf)};"
            >
                <p class="other-prediction-text">
                    <strong>{i}.</strong> {DISEASES[disease]['icon']} {DISEASES[disease]['name']} 
                    ({conf:.2%})
                </p>
            </div>"""), unsafe_allow_html=True)

def main():
    # Language selector with improved styling
    st.sidebar.markdown("""
    <style>
    .language-selector {
        margin-bottom: 1rem;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }
    .sidebar-header {
        margin-top: 0;
        padding-top: 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Language selector
    lang = st.sidebar.selectbox('ЁЯМР Select Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / рднрд╛рд╖рд╛ рдирд┐рд╡рдбрд╛', 
                              list(LANGUAGES.keys()), 
                              format_func=lambda x: LANGUAGES[x])
    
    T = UI_TEXT[lang]
    DISEASES = DISEASE_INFO[lang]

    st.title(T['title'])
    st.subheader(T['subtitle'])
    
    # Sidebar with improved instructions and tips in dropdowns
    st.sidebar.markdown(f'<div class="sidebar-header">{T["about"]}</div>', unsafe_allow_html=True)
    st.sidebar.write(f"""
    {T['supported']}
    - {DISEASES['healthy']['icon']} {DISEASES['healthy']['name']}
    - {DISEASES['downy_mildew']['icon']} {DISEASES['downy_mildew']['name']}
    - {DISEASES['powdery_mildew']['icon']} {DISEASES['powdery_mildew']['name']}
    - {DISEASES['black_spot']['icon']} {DISEASES['black_spot']['name']}
    - {DISEASES['rose_slug']['icon']} {DISEASES['rose_slug']['name']}
    - {DISEASES['rose_mosaic']['icon']} {DISEASES['rose_mosaic']['name']}
    - {DISEASES['rose_rust']['icon']} {DISEASES['rose_rust']['name']}
    """)
    
    # Instructions dropdown
    with st.sidebar.expander(f"ЁЯУЛ {T['instructions']}", expanded=False):
        instruction_1_items = [f"<li>{item.strip()}</li>" for item in T['instruction_1_content'].split('\nтАв') if item.strip()]
        instruction_2_items = [f"<li>{item.strip()}</li>" for item in T['instruction_2_content'].split('\nтАв') if item.strip()]
        instruction_3_items = [f"<li>{item.strip()}</li>" for item in T['instruction_3_content'].split('\nтАв') if item.strip()]
        
        instructions_html = (
            f'<div class="instruction-step">'
            f'<div class="instruction-title">{T["instruction_1"]}</div>'
            f'<div class="instruction-content">'
            f'<ul>'
            f'{"".join(instruction_1_items)}'
            f'</ul>'
            f'</div>'
            f'</div>'
            f'<div class="instruction-step">'
            f'<div class="instruction-title">{T["instruction_2"]}</div>'
            f'<div class="instruction-content">'
            f'<ul>'
            f'{"".join(instruction_2_items)}'
            f'</ul>'
            f'</div>'
            f'</div>'
            f'<div class="instruction-step">'
            f'<div class="instruction-title">{T["instruction_3"]}</div>'
            f'<div class="instruction-content">'
            f'<ul>'
            f'{"".join(instruction_3_items)}'
            f'</ul>'
            f'</div>'
            f'</div>'
        )
        st.markdown(instructions_html, unsafe_allow_html=True)
    
    # Tips dropdown
    with st.sidebar.expander(f"ЁЯТб {T['tips']}", expanded=False):
        tips_content_items = [f"<li>{item.strip()}</li>" for item in T['tips_content'].split('\nтАв') if item.strip()]
        best_practices_items = [f"<li>{item.strip()}</li>" for item in T['best_practices_content'].split('\nтАв') if item.strip()]
        
        tips_html = (
            f'<div class="instruction-step">'
            f'<div class="instruction-title">{T["photo_tips"]}</div>'
            f'<div class="instruction-content">'
            f'<ul>'
            f'{"".join(tips_content_items)}'
            f'</ul>'
            f'</div>'
            f'</div>'
            f'<div class="instruction-step">'
            f'<div class="instruction-title">{T["best_practices"]}</div>'
            f'<div class="instruction-content">'
            f'<ul>'
            f'{"".join(best_practices_items)}'
            f'</ul>'
            f'</div>'
            f'</div>'
        )
        st.markdown(tips_html, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        st.markdown(f'<div class="disease-title">{T["upload_image"]}</div>', unsafe_allow_html=True)
        uploaded_file = st.file_uploader(T['choose_image'], type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                image = Image.open(uploaded_file)
                st.image(image, caption=T['choose_image'], use_column_width=True)
                if st.button(T['predict']):
                    with st.spinner("Analyzing image..."):
                        # Load model first
                        model = load_model()
                        if model is None:
                            st.error("Could not load the model. Please check the error messages above.")
                            return

                        # Process image
                        processed_img = preprocess_image(image)
                        if processed_img is None:
                            st.error("Could not process the image. Please try a different image.")
                            return

                        # Make prediction
                        try:
                            prediction = model.predict(processed_img)
                            # Display prediction results with clean HTML structure
                            display_prediction_results(prediction, lang, DISEASES)
                        except Exception as pred_error:
                            st.error(f"Error making prediction: {str(pred_error)}")
                            st.error("This might be due to:")
                            st.error("1. Incompatible model output format")
                            st.error("2. Image preprocessing issues")
                            st.error("3. Model architecture mismatch")
            except Exception as img_error:
                st.error(f"Error processing uploaded image: {str(img_error)}")
                st.error("Please try uploading a different image.")
        else:
            st.info(T['no_image'])
    with col2:
        st.markdown(f'<div class="disease-title">{T["gallery"]}</div>', unsafe_allow_html=True)
        st.write(T['common_conditions'])
        for disease, info in DISEASES.items():
            with st.expander(f"{info['icon']} {info['name']}"):
                remedy_items_gallery = [f"<li>{item.strip().lstrip('тАв')}</li>" for item in info['remedy'].split('\nтАв') if item.strip()]
                remedy_html_gallery = "".join(remedy_items_gallery)

                st.markdown(f"""<div class="instruction-step">
<div class="instruction-title">ЁЯУЭ Description</div>
<div class="instruction-content">{info['description']}</div>
</div>

<div class="instruction-step">
<div class="instruction-title">ЁЯТб Recommendations</div>
<div class="instruction-content">
<ul>
{remedy_html_gallery}
</ul>
</div>
</div>""", unsafe_allow_html=True)

if __name__ == "__main__":
    main() 
